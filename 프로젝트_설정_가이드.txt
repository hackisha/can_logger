# EMU CAN Logger 프로젝트 전체 설정 가이드

이 문서는 라즈베리파이에서 CAN 데이터를 읽어 Firebase에 전송하고,
웹 대시보드를 통해 실시간으로 데이터를 모니터링하는 시스템을 구축하는 전체 과정을 안내합니다.

---
### 1단계: 라즈베리파이 초기 시스템 설정
---
필요한 기본 도구와 파이썬 라이브러리를 설치합니다.

1.  **시스템 패키지 업데이트 및 설치 (Git, Node.js, python-can):**
    ```bash
    sudo apt-get update && sudo apt-get install -y git nodejs npm python3-can
    ```

2.  **Firebase CLI 도구 설치:**
    ```bash
    sudo npm install -g firebase-tools
    ```

3.  **Firebase Admin 파이썬 라이브러리 설치:**
    ```bash
    pip install firebase-admin --break-system-packages
    ```

---
### 2단계: 프로젝트 파일 준비
---
프로젝트를 실행하는 데 필요한 모든 파일을 준비하고 설정합니다.

1.  **`can_logger_firebase.py`:**
    *   EMU CAN 데이터를 읽고 Firebase Realtime Database에 전송하는 메인 파이썬 스크립트입니다.

2.  **`dashboard/` 폴더:**
    *   `dashboard.html`과 `gragh.html` 파일이 들어있습니다.
    *   Firebase에 저장된 데이터를 시각화하여 보여주는 웹페이지입니다.

3.  **`serviceAccountKey.json`:**
    *   Firebase 프로젝트에 접근하기 위한 비밀 인증 키입니다.
    *   Firebase 콘솔에서 다운로드하여 이 프로젝트 폴더의 루트에 위치시켜야 합니다.
    *   **보안 주의:** 이 파일은 절대로 외부에 노출되거나 GitHub에 업로드되면 안 됩니다.

4.  **`.gitignore` 파일 생성:**
    *   보안에 민감한 `serviceAccountKey.json` 파일이나 불필요한 로그, 가상환경 폴더 등이 Git에 올라가지 않도록 설정합니다.
    *   아래 내용으로 `.gitignore` 파일을 생성합니다.
    ```
    # Python
    __pycache__/
    *.pyc
    env/
    venv/

    # Logs
    logs/
    *.log
    firebase-debug.log

    # Secrets
    serviceAccountKey.json

    # Node
    node_modules/
    ```

5.  **`firebase.json` 파일 생성:**
    *   Firebase Hosting이 어떤 폴더를 웹사이트로 배포할지 알려주는 설정 파일입니다.
    *   아래 내용으로 `firebase.json` 파일을 생성합니다.
    ```json
    {
      "hosting": {
        "public": "dashboard",
        "ignore": [
          "firebase.json",
          "**/.*",
          "**/node_modules/**"
        ]
      }
    }
    ```

---
### 3단계: GitHub 저장소 및 자동 배포 설정
---
코드를 GitHub에 올리고, 코드가 변경될 때마다 자동으로 웹 대시보드가 업데이트되도록 설정합니다.

1.  **GitHub 저장소 생성:**
    *   PC에서 GitHub에 접속하여 비어있는 새 저장소(repository)를 생성합니다. (예: `can_logger`)

2.  **로컬 Git 저장소 초기화 및 원격 연결:**
    ```bash
    # 현재 폴더를 Git 저장소로 초기화
    git init

    # GitHub 저장소를 'origin'이라는 이름으로 원격 연결
    git remote add origin https://github.com/사용자이름/저장소이름.git
    ```

3.  **GitHub Personal Access Token (PAT) 생성:**
    *   GitHub의 [Tokens](https://github.com/settings/tokens) 페이지로 이동하여 새 토큰을 생성합니다.
    *   **반드시 `repo`와 `workflow` 두 개의 스코프(scope)를 체크**해야 합니다.
    *   생성된 토큰 (`ghp_...`)을 안전한 곳에 복사합니다. 이 토큰은 다시 볼 수 없습니다.

4.  **GitHub에 코드 첫 푸시(Push):**
    ```bash
    # Git 사용자 정보 설정 (최초 한 번)
    git config --global user.name "GitHub사용자이름"
    git config --global user.email "GitHub이메일"

    # 모든 파일을 Git에 추가
    git add .

    # 첫 커밋 생성
    git commit -m "Initial commit"

    # PAT를 사용하여 GitHub에 푸시
    git push https://<복사한_PAT>@github.com/사용자이름/저장소이름.git
    ```

5.  **GitHub Actions Secret 설정:**
    *   GitHub 저장소의 `Settings > Secrets and variables > Actions` 메뉴로 이동합니다.
    *   `New repository secret` 버튼을 클릭합니다.
    *   **Name:** `FIREBASE_SERVICE_ACCOUNT_EMUCANLOGGER`
    *   **Secret:** `serviceAccountKey.json` 파일의 전체 내용을 복사하여 붙여넣습니다.

6.  **GitHub Actions 워크플로우 파일 생성:**
    *   PC에서 GitHub 저장소 페이지의 `Actions` 탭으로 이동합니다.
    *   `set up a workflow yourself`를 클릭합니다.
    *   파일 이름을 `firebase-hosting.yml`로 변경하고, 아래 코드를 붙여넣은 후 커밋합니다.
    ```yaml
    name: Deploy to Firebase Hosting on Push

    on:
      push:
        branches:
          - master

    jobs:
      build_and_deploy:
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v3
          - uses: FirebaseExtended/action-hosting-deploy@v0
            with:
              repoToken: '${{ secrets.GITHUB_TOKEN }}'
              firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_EMUCANLOGGER }}'
              channelId: live
              projectId: emucanlogger
    ```

---
### 4단계: 로거 스크립트 자동 실행 설정
---
라즈베리파이가 부팅되면 `can_logger_firebase.py` 스크립트가 자동으로 실행되도록 `systemd` 서비스를 등록합니다.

1.  **서비스 파일 생성:**
    *   라즈베리파이 터미널에서 아래 명령어를 실행하여 서비스 파일을 생성하고 내용을 저장합니다.
    ```bash
    sudo bash -c 'cat > /etc/systemd/system/can-logger.service' << EOF
    [Unit]
    Description=CAN Logger Service
    After=network.target

    [Service]
    User=pi
    WorkingDirectory=/home/pi/can_logger
    ExecStart=/usr/bin/python3 /home/pi/can_logger/can_logger_firebase.py
    Restart=always
    StandardOutput=journal
    StandardError=journal

    [Install]
    WantedBy=multi-user.target
    EOF
    ```

2.  **서비스 활성화 및 시작:**
    ```bash
    # 부팅 시 서비스가 자동으로 시작되도록 활성화
    sudo systemctl enable can-logger.service

    # 지금 바로 서비스를 시작
    sudo systemctl start can-logger.service
    ```

---
### 5단계: 사용 및 로그 확인
---
모든 설정이 완료되었습니다.

1.  **사용법:**
    *   라즈베리파이를 차량에 설치하고 전원을 켜면, 자동으로 핫스팟에 연결���고 로깅 스크립트가 실행됩니다.
    *   팀원들은 PC나 모바일에서 아래 주소로 접속하여 실시간 데이터를 확인합니다.
    *   **https://emucanlogger.web.app/dashboard.html**

2.  **자동 실행 스크립트 로그 확인:**
    *   스크립트가 잘 동작하는지, 또는 오류가 없는지 확인하려면 아래 명령어를 사용합니다.
    ```bash
    # 실시간으로 로그 확인 (Ctrl+C로 종료)
    journalctl -u can-logger.service -f

    # 전체 로그 확인
    journalctl -u can-logger.service
    ```
